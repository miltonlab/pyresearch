Requeriments

    sqlalchemy?
    json

In [3]:

"""

=====================================

PEP 20 (The Zen of Python) by example

=====================================

Usage: %prog

:Author: Hunter Blanks, hblanks@artifex.org / hblanks@monetate.com

:Date: 2011-02-08 for PhillyPUG/philly.rb, revised 2011-02-10

Sources:

- http://artifex.org/~hblanks/talks/2011/pep20_by_example.pdf

- http://artifex.org/~hblanks/talks/2011/pep20_by_example.html

- http://artifex.org/~hblanks/talks/2011/pep20_by_example.py.txt

Dependencies for PDF output:

- Pygments 1.4

- pdflatex & the usual mess of latex packages

""" 

Out[3]:

'\n=====================================\nPEP 20 (The Zen of Python) by example\n=====================================\nUsage: %prog\n:Author: Hunter Blanks, hblanks@artifex.org / hblanks@monetate.com\n:Date: 2011-02-08 for PhillyPUG/philly.rb, revised 2011-02-10\nSources:\n- http://artifex.org/~hblanks/talks/2011/pep20_by_example.pdf\n- http://artifex.org/~hblanks/talks/2011/pep20_by_example.html\n- http://artifex.org/~hblanks/talks/2011/pep20_by_example.py.txt\nDependencies for PDF output:\n- Pygments 1.4\n- pdflatex & the usual mess of latex packages\n'

Beautiful is better than ugly
In [23]:

################################## 2 ################################### 

"""

Load the cat, dog, and mouse models so we can edit instances of them.

"""

 

from ctypes.macholib.framework import *

from email.mime.message import *

from IPython.display import *

 

#-----------------------------------------------------------------------

 

from ctypes.macholib.framework import framework_info as framework_ctypes

from email.mime.message import MIMEMessage as mime_email

from IPython.display  import Image as img_ipython

 

#----------------------------------------------------------------------- 

Explicit is better than implicit
In [5]:

"""

Can you write out these measurements to disk?

"""

 

measurements = [

{'weight': 392.3, 'color': 'purple', 'temperature': 33.4},

{'weight': 34.0, 'color': 'green', 'temperature': -3.1},

]

 

#-----------------------------------------------------------------------

 

def store_complex(measurements):

    import sqlalchemy

    import sqlalchemy.types as sqltypes

    db = sqlalchemy.create_engine('sqlite:///measurements.db')

    db.echo = False

    metadata = sqlalchemy.MetaData(db)

    table = sqlalchemy.Table('measurements', metadata,

        sqlalchemy.Column('id', sqltypes.Integer, primary_key=True),

        sqlalchemy.Column('weight', sqltypes.Float),

        sqlalchemy.Column('temperature', sqltypes.Float),

        sqlalchemy.Column('color', sqltypes.String(32)),

    )

    table.create(checkfirst=True)

    for measurement in measurements:

        i = table.insert()

        i.execute(**measurement)

 

#-----------------------------------------------------------------------

 

def store_simple(measurements):

    import json

    with open('measurements.json', 'w') as f:

        f.write(json.dumps(measurements))

 

#-----------------------------------------------------------------------

  

In [6]:

store_complex(measurements)

In [10]:

store_simple(measurements)

In [12]:

%less measurements.json
